{"version":3,"sources":["wallet/network_info.js","wallet/connect.js","App.js","contract/address.js","contract/reset.js","contract/get_count.js","contract/increment.js","pages/play.js","index.js"],"names":["chainInfo","chainId","chainName","rpc","rest","coinDenom","coinMinimaldenom","coinDecimals","bech32","stakeCurrency","coinMinimalDenom","bip44","coinType","bech32Config","bech32PrefixAccAddr","bech32PrefixAccPub","bech32PrefixValAddr","bech32PrefixValPub","bech32PrefixConsAddr","bech32PrefixConsPub","currencies","feeCurrencies","networkInfo","connectWallet","event","getInfo","window","getOfflineSigner","keplr","alert","experimentalSuggestChain","enable","offlineSigner","getAccounts","accounts","SigningCosmWasmClient","connectWithSigner","client","getBalance","address","balance","App","useState","setClient","setAddress","setBalance","setChainId","visible","setVisible","navigate","useNavigate","className","src","alt","onClick","state","denom","style","visibility","Object","keys","map","id","type","amount","showWalletInfo","contractAddress","reset","score","chanId","gasPrice","GasPrice","fromString","executeFee","calculateFee","execute","result","get_count","queryContractSmart","increment","Play","time","setTime","gameOver","setGameOver","gameStart","setGameStart","top","left","targetPosition","setTargetPosition","loading","setLoading","setScore","previousScore","setPreviousScore","timerId","setTimerId","location","useLocation","useEffect","getClient","display","clearInterval","startGame","count","setInterval","submitScore","position","Math","floor","random","ReactDOM","createRoot","document","getElementById","render","StrictMode","basename","process","path","element"],"mappings":"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","file":"static/js/main.b1887e26.chunk.js","sourcesContent":["// factory pattern 활용\nconst chainInfo = (chainId, chainName, rpc, rest, coinDenom, coinMinimaldenom, coinDecimals, bech32) => {\n    return {\n        // 체인 Id\n        chainId: chainId,\n        // 사용자에게 보여질 chain 이름\n        chainName: chainName,\n        // 체인의 RPC 엔드포인트 주소\n        rpc: rpc,\n        // 체인의 REST 엔드포인트 주소\n        rest: rest,\n        // 스테이킹 코인 정보\n        stakeCurrency: {\n            // 사용자에게 보여지는 코인 명칭(denomination)\n            coinDenom: coinDenom,\n            // 실제 블록체인에서 사용되는 코인의 명칭 (i.e. uatom, uosmo)\n            coinMinimalDenom: coinMinimaldenom,\n            // upebble를 PEBBLE로 변환하는 소수점 이하 자릿수\n            coinDecimals: coinDecimals,\n        },\n        // BIP44 경로\n        bip44: {\n            // BIP44 타입의 코인만 사용 가능\n            // 'purpose' 는 44로 항상 고정되어 있다.\n            // 'coinType'은 118 (Cosmos Hub) 을 사용할 것을 권장\n            coinType: 118,\n        },\n        // 사용자에게 주소를 보여주는 Bech32 정보\n        bech32Config: {\n            bech32PrefixAccAddr: bech32,\n            bech32PrefixAccPub: bech32 + \"pub\",\n            bech32PrefixValAddr: bech32 + \"valoper\",\n            bech32PrefixValPub: bech32 + \"valoperpub\",\n            bech32PrefixConsAddr: bech32 + \"valcons\",\n            bech32PrefixConsPub: bech32 + \"valconspub\"\n        },\n        // 체인에서 사용되는 모든 코인/토큰의 리스트\n        currencies: [{\n            // 사용자에게 보여지는 코인 명칭(denomination)\n            coinDenom: coinDenom,\n            // 실제 블록체인에서 사용되는 코인 명칭\n            coinMinimalDenom: coinMinimaldenom,\n            // upebble를 PEBBLE로 변환하는 소수점 이하 자릿수\n            coinDecimals: coinDecimals,\n        }],\n        // 체인에서 fee 토큰으로 사용되는 코인/토큰의 리스트\n        feeCurrencies: [{\n            // 사용자에게 보여지는 코인 명칭(denomination)\n            coinDenom: coinDenom,\n            // 실제 블록체인에서 사용되는 코인 명칭\n            coinMinimalDenom: coinMinimaldenom,\n            // upebble를 PEBBLE로 변환하는 소수점 이하 자릿수\n            coinDecimals: coinDecimals,\n        }],\n        // (Optional) ENS에서 주소를 가져올 때만 사용되는 정보로 BIP44의 coinType과 일치하는 것이 좋음\n        coinType: 118,\n        // (Optional) 트랜잭션의 가격을 저알 때 사용됨\n        // 따로 지정하지 않을 경우 (low: 0.01, average: 0.025, high: 0.04)를 default로 설정\n        // 아직까지 Keplr 는 온체인 데이터에 기반한 동적 계산을 지원하지 않음\n        // RPC/REST 엔드포인트와 체인의 검증인들이 설정한 최소 gas 가격보다 높아야 한다.\n        // gasPriceStep: {\n        //     low: 0.01,\n        //     average: 0.025,\n        //     high: 0.04\n        // }\n    }\n}\n\nconst networkInfo = {\n    \"cliffnet-1\" : chainInfo(\"cliffnet-1\", \"Cliffnet\", \"https://rpc.cliffnet.cosmwasm.com:443\", \"https://lcd.cliffnet.cosmwasm.com\", \"PEBBLE\", \"upebble\", 6, \"wasm\"),\n    \"osmo-test-4\" : chainInfo(\"osmo-test-4\", \"Osmosis Testnet\", \"https://testnet-rpc.osmosis.zone\", \"https://testnet-rest.osmosis.zone/\", \"OSMO\", \"uosmo\", 6, \"osmo\"),\n    \"uni-3\" : chainInfo(\"uni-3\", \"Juno Testnet\", \"https://rpc.uni.junonetwork.io:443\", \"https://api.uni.junonetwork.io/\", \"JUNOX\", \"ujunox\", 6, \"juno\"),\n    \"constantine-1\" : chainInfo(\"constantine-1\", \"Archway Testnet\", \"https://rpc.constantine-1.archway.tech:443\", \"https://api.constantine-1.archway.tech\", \"CONST\", \"uconst\", 6, \"archway\")\n}\n\nexport default networkInfo;","import { SigningCosmWasmClient } from \"@cosmjs/cosmwasm-stargate\";\n\nconst connectWallet = async(event, chainInfo, {getInfo}) => {\n    // 사용자의 브라우저에 Keplr extension이 설치되었는지 확인\n    if (!window.getOfflineSigner || !window.keplr) {\n        alert(\"Please install keplr extension\");\n    }\n    if (window.keplr.experimentalSuggestChain) {\n        try {\n            await window.keplr.experimentalSuggestChain(chainInfo);\n        } catch {\n            alert(\"Failed to suggest the chain\");\n        }\n    } else{\n        alert(\"Please use the recent version of keplr extension\");\n    }\n\n    // Keplr에 해당 chainId로의 접근 요청\n    await window.keplr.enable(chainInfo.chainId);\n    // 체인 ID를 이용해서 OfflineSigner 가져오기 \n    const offlineSigner = window.getOfflineSigner(chainInfo.chainId);\n    // address & public key 페어 배열 리턴\n    const accounts = await offlineSigner.getAccounts();\n    // SigningCosmWasmClient 생성\n    const client = await SigningCosmWasmClient.connectWithSigner(chainInfo.rpc, offlineSigner);\n    // 해당 주소의 balance 가져오기\n    const balance = await client.getBalance(accounts[0].address, chainInfo.stakeCurrency.coinMinimalDenom);\n    // <App> 으로 정보 넘겨주기 위한 함수\n    getInfo(client, accounts[0].address, balance, chainInfo.chainId);\n}\n\nexport default connectWallet;","import './App.css';\nimport { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport networkInfo from './wallet/network_info';\nimport connectWallet from './wallet/connect';\n\nfunction App() {\n  // connectWallet에서 받아올 값\n  const [client, setClient] = useState();\n  const [address, setAddress] = useState();\n  const [balance, setBalance] = useState();\n  const [chainId, setChainId] = useState();\n  // PLAY 버튼의 visibility 속성을 위한 변수\n  const [visible, setVisible] = useState(\"hidden\");\n  const navigate = useNavigate();\n\n  // connectWallet 으로 전달할 함수\n  const getInfo = (client, address, balance, chainId) => {\n    setClient(client);\n    setAddress(address);\n    setBalance(balance);\n    setChainId(chainId);\n    setVisible(\"visible\");\n  }\n\n  // connectWallet으로 가져온 정보를 초기화\n  const disconnect = (event) => {\n    setClient();\n    setChainId();\n    setAddress();\n    setBalance();\n    setVisible(\"hidden\");\n  }\n\n  // 네트워크 별로 chainId에 따라서 DISCONNECT와 CONNECT 버튼이 나타나도록 구현\n  const renderBtn = () => {\n    return Object.keys(networkInfo).map((id) => {\n      if (chainId === id) {\n        return (\n          <button type='button' onClick={event => disconnect(event)} className='disconnect-btn'>DISCONNECT</button>\n        )\n      }\n      return (\n        <button type='button' onClick={event => connectWallet(event, networkInfo[id], {getInfo})} className='connect-btn'> {networkInfo[id].chainName} </button>\n      )\n    })\n  }\n\n  // 지갑과 연결되어 있으면 address와 balance 정보 출력\n  const showWalletInfo = () => {\n    if (client) {\n      return (\n        <div className='wallet-info'>\n          <p>{`address: ${address}`}</p>\n          <p>{`balance: ${balance.amount} ${balance.denom}`}</p>\n        </div>\n      )\n    }\n  }\n\n  // PLAY 버튼 클릭하면 /play 주소로 이동\n  const playGame = () => {\n    return (\n      <div className=\"menu\">\n        <button\n          className=\"play-btn\"\n          onClick={() => {\n            navigate(\"/play\", {\n              state: {\n                address: address,\n                denom: balance.denom,\n                chainId: chainId,\n              },\n            });\n          }} style={{visibility: visible}}\n        >\n          <span>PLAY</span>\n        </button>\n        {!client && (<p>Choose your network and Connect wallet</p>)}\n        {client && (<p>Click as many CosmWasm Icon as you can within 15 seconds!</p>)}\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"App\">\n      <header>\n        <div className='header-titles'>\n          <img src='./cosmwasm-logo.svg' alt=\"Cosmwasm Logo\" className='cosmwasm-logo'/>\n          <h1>Clicker Game</h1>\n        </div>\n      </header>\n      <div className='App-container'>\n        <div className='App-menu-container'>\n          {playGame()}\n          <div className='connect-wallet'>\n            {renderBtn()}\n          </div>\n        </div>\n        {showWalletInfo()}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const contractAddress = {\n    \"cliffnet-1\" : \"wasm1chnsdmv64xf3p6e7lj8lq2lhkfxgkwjfx4gujt0u3rcdxyu8f8ds0j9ktd\",\n    \"osmo-test-4\" : \"osmo1sm8weyvz7ues2mx9eg6rnqu9yazjdwru5p6u7u0jkhgmk6vqt8equ8t5xp\",\n    \"uni-3\" : \"juno1yfp9zyx9zhqe77d05yqjx3ctqjhzha0xn5d9x8zxcpp658ks2hvqlfjt72\",\n    \"constantine-1\" : \"archway1wnuakyjhvlnepk2g9ncvvaks0zy0axgx70pet4jh2nv8lmsuff9qseuvpc\"\n};\n\nexport default contractAddress;","import { calculateFee, GasPrice } from \"@cosmjs/stargate\";\nimport contractAddress from \"./address\";\n\n\nconst reset = async(client, address, score, chanId, denom) => {\n    const gasPrice = GasPrice.fromString(\"0.025\" + denom);\n    const executeFee = calculateFee(300_000, gasPrice);\n    const result = await client.execute(address, contractAddress[chanId], { \"reset\": {\"count\": score} }, executeFee);\n    return result;\n}\n\nexport default reset;","import contractAddress from \"./address\";\n\nconst get_count = async (client, chainId) => {\n    const result = await client.queryContractSmart(contractAddress[chainId], {\"get_count\": {}});\n    return result;\n}\n\nexport default get_count;","import { calculateFee, GasPrice } from \"@cosmjs/stargate\";\nimport contractAddress from \"./address\";\n\n\nconst increment = async(client, address, score, chainId, denom) => {\n    const gasPrice = GasPrice.fromString(\"0.025\" + denom);\n    const executeFee = calculateFee(300_000, gasPrice);\n    const result = await client.execute(address, contractAddress[chainId], { \"increment\": {\"count\" : score} }, executeFee);\n    return result;\n}\n\nexport default increment;","import React, { useState, useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport { SigningCosmWasmClient } from \"@cosmjs/cosmwasm-stargate\";\nimport reset from \"../contract/reset\";\nimport get_count from \"../contract/get_count\";\nimport networkInfo from \"../wallet/network_info\";\nimport increment from \"../contract/increment\";\n\nconst Play = () => {\n    // 플레이 시간\n    const playTime = 15;\n    // 플레이 시간\n    const [time, setTime] = useState(playTime);\n    // 게임 오버 여부\n    const [gameOver, setGameOver] = useState(false);\n    // 게임 시작 여부\n    const [gameStart, setGameStart] = useState(false);\n    // 아이콘의 위치 정보\n    const [targetPosition, setTargetPosition] = useState({\n        top: \"20%\",\n        left: \"50%\",\n      });\n    // 로딩 중인지 여부\n    const [loading, setLoading] = useState(false);\n    // 현재 점수\n    const [score, setScore] = useState(0);\n    // 컨트랙트에 저장된 이전 점수\n    const [previousScore, setPreviousScore] = useState(0);\n    // client\n    const [client, setClient] = useState();\n    // setInterval이 리턴하는 timerId 값 저장\n    const [timerId, setTimerId] = useState();\n    const location = useLocation();\n        \n    // 페이지가 렌더링될 때 client 를 생성해서 저장\n    useEffect(() => {\n        const getClient = async (chainId) => {\n            // Keplr에 해당 chainId로의 접근 요청\n            await window.keplr.enable(chainId);\n            // 체인 ID를 이용해서 OfflineSigner 가져오기 \n            const offlineSigner = window.getOfflineSigner(chainId);\n            // SigningCosmWasmClient 생성\n            const client = await SigningCosmWasmClient.connectWithSigner(\n                networkInfo[chainId].rpc,\n                offlineSigner\n            );\n            setClient(client);\n            };\n        getClient(location.state.chainId);\n    }, []);\n\n    // time이 변하는 것을 감지하여 0이 될때 게임 종료\n    useEffect(() => {\n        if (time === 0) {\n        // 아이콘이 보이지 않도록 설정\n        setTargetPosition({ display: \"none\" });\n        // 게임 종료 알람창\n        alert(\n            `Game Over! Your score is ${score}. Please confirm transaction to submit score.`\n        );\n        // setInterval 함수 중지\n        clearInterval(timerId);\n        setGameOver(true);\n        setGameStart(false);\n        }\n    }, [time]);\n\n    // Game Start 버튼 눌렀을 때 실행\n    const startGame = async(event) => {\n        // 컨트랙트와 통신하는 동안 loading 상태를 true로 설정\n        setLoading(true);\n        // get_count 쿼리 실행\n        const result = await get_count(client, location.state.chainId);\n        // preiousScore에 읽어온 count 값 저장\n        setPreviousScore(result.count);\n        // reset 트랜잭션 실행해서 컨트랙트의 count 값을 0으로 초기화\n        await reset(client, location.state.address, 0, location.state.chainId, location.state.denom);\n        // 컨트랙트와 통신이 끝난 후 loading 상태를 false로 설정\n        setLoading(false);\n        // gameStart 를 true로 설정하여 게임 시작하기\n        setGameStart(true);\n        // 아이콘이 나타나도록 위치 설정\n        setTargetPosition({ top: \"20%\", left: \"50%\" });\n        // setInterval 메소드를 이용해 1초마다 time이 1씩 줄어들도록 설정\n        setTimerId(\n            setInterval(() => {\n                setTime((time) => (time > 0 ? time - 1 : 0));\n            }, 1000)\n        );\n    }\n\n    // Transaction 버튼을 눌렀을 때 실행\n    const submitScore = async(event) => {\n        // 컨트랙트와 통신하는 동안 loading 상태를 true로 설정\n        setLoading(true);\n        // 사용자가 얻은 점수(score) 만큼 increment 트랜잭션 실행해서 컨트랙트의 count 값을 score로 바꾸기\n        await increment(client, location.state.address, score, location.state.chainId, location.state.denom);\n        // 현재 점수 0으로 초기화\n        setScore(0);\n        // get_count 쿼리를 통해 컨트랙트에 저장된 count 값을 읽어와서 Previous Score에 업데이트\n        const result = await get_count(client, location.state.chainId);\n        setPreviousScore(result.count);\n        // 컨트랙트와 통신이 끝난 후 loading 상태를 false로 설정\n        setLoading(false);\n        // 게임을 다시 시작할 수 있도록 설정\n        setGameOver(false);\n        setTime(playTime);\n    };\n\n    // 게임이 시작되기 전에는 GAME START , 게임 오버된 후에는 TRANSACTION 버튼 보이도록\n    const renderButton = () => {\n        if (gameOver === false) {\n            return (\n                <button className=\"game-btn\" onClick={(event) => startGame(event)}>\n                GAME START\n                </button>\n            );\n        } else {\n            return (\n                <button className=\"game-btn\" onClick={(event) => submitScore(event)}>\n                TRANSACTION\n                </button>\n            );\n        }\n    };\n\n    // CosmWasm 아이콘을 클릭했을 때 실행되는 함수\n    const handleClick = () => {\n        // 현재 점수가 +1 씩 증가\n        setScore((score) => score + 1);\n        // 아이콘의 다음 위치를 랜덤으로 설정\n        setTargetPosition({\n        top: `${Math.floor(Math.random() * 80 + 10)}%`,\n        left: `${Math.floor(Math.random() * 80) + 10}%`,\n        });\n    };\n\n    return (\n        <div className=\"score-board-container\">\n          <div className=\"play-container\">\n            <div className=\"score-menu\">\n              <span>Previous Score: {previousScore}</span>\n              <span>Current Score: {score}</span>\n            </div>\n            {renderButton()}\n            <span>Time left: {time} s</span>\n          </div>\n    \n          <div className=\"game-container\">\n            <img src=\"./Background.svg\" alt=\"background\" id=\"background\"></img>\n            {gameStart && (\n              <img\n                src=\"./cosmwasm-mark.svg\"\n                alt=\"Target\"\n                id=\"target\"\n                style={{ position: \"absolute\", ...targetPosition }}\n                onClick={handleClick}\n              />\n            )}\n            {loading && <div className=\"loading-msg\">Loading...</div>}\n          </div>\n        </div>\n    );\n}\n\nexport default Play;","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { Route, Routes, BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport Play from './pages/play';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <div className='App-header'>\n      <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <Routes>\n          <Route path=\"/\" element={<App />} />\n          <Route path=\"/play\" element={<Play />}/>\n        </Routes>\n      </BrowserRouter>\n\n      <div className='footer-container'>\n        <span>Made with</span> \n        <img src='./dsrv.png' id='footer-logo' alt='dsrv-logo'></img>\n      </div>\n    </div>\n  </React.StrictMode>\n);\n"],"sourceRoot":""}